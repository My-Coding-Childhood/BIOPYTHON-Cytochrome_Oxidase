# -*- coding: utf-8 -*-
"""biopython_translation&NCBI_search&NCBI_BLAST

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19HYX-aC_G8fj2loHDLyR2z3Urw0D5A6u
"""

# Let us install biopython
!pip install biopython

# How to translate to a protein
from Bio.Seq import Seq
coding_dna = Seq("ATATCCCGGTAAACCTACCGGGAATTAAGTCTATGACCTGAAGTCTAGCGTCAGTCGCCCGTGACTGCCACCTGC")
#To return reverse complement as a DNA sequence
print(coding_dna.reverse_complement())
#To transcribe a DNA sequence to an RNA sequence
print(coding_dna.transcribe())
#To convert a nucleotide sequence to a protein
print(coding_dna.translate())

# COX1_Search from NCBI after establishing a search query from NCBI (using the method of refining search)
# Commands to get ready for search from Entrez
from Bio import Entrez
from Bio import SeqIO
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
Entrez.email= "ugwupaschal@gmail.com"

# Lets now search, setting the database(db) to nucleotide and copying our search query from NCBI
all_records=[]
# In search terms, remember to add backslashes in front of any quote, to avoid getting an error also use the retmax fuction to set maximum number to return, else it would return 20 by default. In this case, we set our maximum value to 100000
handle1=Entrez.esearch(db="nucleotide", term="(COX1 or COXI) AND fungi [ORGN] AND 450:30000 [SLEN] NOT \"whole genome\" NOT \"complete genome\" NOT \"partial\" NOT intron", retmax=100000)

# Lets check our store of records, for the list of searches returned by the NCBI search query
# The IdList must be in a single quote and square bracket
records=Entrez.read(handle1)
print(len(records['IdList']))

# Lets know the actual record numbers. Each of these numbers corresconds to a particular genebank record
recordnums=records['IdList']
print(recordnums)

# Let us now get the actual record (we use the efetch function), rettype and retmode mean return type and return mode respectively
# Remember to close both handles that we used
handle=Entrez.efetch(db="nucleotide", id=recordnums, rettype='gb', retmode='xml')
my_genbank_records=Entrez.read(handle)
handle.close
handle1.close

# Let us print our gene bank records and the organism field.
# We use [0] to get the first record of the field
print("My first fungi: ",my_genbank_records[0]['GBSeq_organism'],"and its accession number is: ",my_genbank_records[0]['GBSeq_primary-accession'])

# Let us list all our genebank records
list(my_genbank_records)

# We can not also check the various parameters that can be extracted from our genebank records using the following command:
list(my_genbank_records[0])

# Now let us print the locus, length, strandednes, topology, division , source taxonomy, and the gene features of the first organism
print(my_genbank_records[0]['GBSeq_locus'])
print(my_genbank_records[0]['GBSeq_length'])
print(my_genbank_records[0]['GBSeq_strandedness'])
print(my_genbank_records[0]['GBSeq_topology'])
print(my_genbank_records[0]['GBSeq_division'])
print(my_genbank_records[0]['GBSeq_source'])
print(my_genbank_records[0]['GBSeq_taxonomy'])
print(my_genbank_records[0]['GBSeq_feature-table'])

# To check the length of our fasta records
my_fasta_records=[]
print(len(my_genbank_records))
for i in range(len(my_genbank_records)):
  my_fasta_records.append(SeqRecord(Seq(my_genbank_records[i]['GBSeq_sequence']),id=my_genbank_records[i]['GBSeq_primary-accession'],description=my_genbank_records[i]['GBSeq_definition']))

# To get our output files in both genebank and fasta formats
#1 In fasta format
one_file=open("my_seqs.fa","w")
SeqIO.write(my_fasta_records,one_file,"fasta");
one_file.close

#2 In genebank format
one_file=open("my_seqs.gb","w")
handle=Entrez.efetch(db="nucleotide",id=recordnums,rettype="gbwithparts",retmode="text")
my_genbank_records=SeqIO.parse(handle,"genbank")
SeqIO.write(my_genbank_records,one_file,"gb");
one_file.close

#NOTE: In google colab, both the fasta file and genebank file would be saved temporarily in the lacal files environment at the top left part of the computer screen. They can then be downloaded and viewed.

#################### LET US NOW GO INTO NCBI BLAST #######################

# Install NCBI BLAST
!apt install ncbi-blast+

!curl \
ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/complete/uniprot_sprot.fasta.gz --output uniprot_sprot.fasta.gz

!gunzip -k uniprot_sprot.fasta.gz

# We now use makeblastdb tool to input our file in fasta format in a protein database for our blasting
!makeblastdb -in uniprot_sprot.fasta \
-dbtype prot \
-out uniprot_sprot_r2018_08

"""**Get a Query Sequence**"""

# Getting file from url to local location for blasting
!wget https://eagle.fish.washington.edu/cnidarian/Ab_4denovo_CLC6_a.fa

# How many sequences? Lets count ">" as we know each contig has 1
!grep -c ">" Ab_4denovo_CLC6_a.fa
!head -20 Ab_4denovo_CLC6_a.fa

"""**RUN BLAST**"""

!blastx \
-query Ab_4denovo_CLC6_a.fa \
-db uniprot_sprot_r2018_08 \
-out Ab_4-uniprot_blastx.tab \
-evalue 1E-20 \
-num_threads 4 \
-max_target_seqs 1 \
-outfmt 6
#We us outfmt 6 in order to have our output in tabular format

!head -10 uniprot_sprot.fasta

!wc -l Ab_4-uniprot_blastx.tab
!cat Ab_4-uniprot_blastx.tab

